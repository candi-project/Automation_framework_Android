{"name": "test_enterDataInAdmin", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFrameWork.pages.LoginPage.LoginPage object at 0x7f36cfec9c50>, text = 'Candi', locatorValue = 'com.code2lead.kwad:id/Edt_admin', locatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n../base/BasePage.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <AppiumFrameWork.pages.LoginPage.LoginPage object at 0x7f36cfec9c50>, locatorValue = 'com.code2lead.kwad:id/Edt_admin', locatorType = 'id'\n\n    def waitForElement(self, locatorValue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 20, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n>           element = wait.until(lambda x: x.find_element_by_android_uiautomator(\n                'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().id(locatorValue))'))\n\n../base/BasePage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ab0f4b31-1583-4fef-b532-9a07fa803344\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x7f36cff1f440>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../venv/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFrameWork.tests.LoginPageTest.LoginTest testMethod=test_enterDataInAdmin>\n\n    @pytest.mark.run(order=2)\n    def test_enterDataInAdmin(self):\n>       self.gt.enterAdmin()\n\nLoginPageTest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../pages/LoginPage.py:45: in enterAdmin\n    self.sendText(\"Candi\", self._enterAdmin, \"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <AppiumFrameWork.pages.LoginPage.LoginPage object at 0x7f36cfec9c50>, text = 'Candi', locatorValue = 'com.code2lead.kwad:id/Edt_admin', locatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            element.send_keys(text)\n            self.log.info(\"Send text on element found with locator Type: \" + locatorType + \" and with locator value: \" + locatorValue)\n        except:\n            self.log.info(\"Unable to send text on element with locator Type: \" + locatorType + \" and with locator value: \" + locatorValue)\n            self.takeScreenShot(locatorType)\n>           assert False\nE           AssertionError\n\n../base/BasePage.py:103: AssertionError"}, "attachments": [{"name": "id", "source": "4448f01b-0513-4acd-947d-0c8e4c2cd01e-attachment.png", "type": "image/png"}, {"name": "log", "source": "0074d353-8248-46b5-a2d2-9d25bc5d98de-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f86d41e9-e69c-4fc9-8545-6b9875ad4730-attachment.txt", "type": "text/plain"}], "start": 1603385532263, "stop": 1603385553095, "uuid": "5800fb08-8474-408a-bfa7-656f4e6e74e1", "historyId": "7a4c556c887161456fa57ed193e7c3d8", "testCaseId": "a40c4d136b740cf727260ab05848647f", "fullName": "LoginPageTest.LoginTest#test_enterDataInAdmin", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'setUp')"}, {"name": "suite", "value": "LoginPageTest"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "candi-ThinkPad-E480"}, {"name": "thread", "value": "4662-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "LoginPageTest"}]}